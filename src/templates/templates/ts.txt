import { AppConfig } from "==RELATIVE_PATH==/factories/AppConfig";
import { PageErrorException } from "==RELATIVE_PATH==/factories/exceptions/PageErrorException";
import { AppService, app } from "==RELATIVE_PATH==/interfaces/app";
import { RouteService } from "==RELATIVE_PATH==/services/RouteService";
import { TemplateData } from "==RELATIVE_PATH==/services/TemplateData";
import { RequesterEngine } from "==RELATIVE_PATH==/services/requester-engine/RequesterEngine";

/**
 * This service allows you to have control over how 
 * the application starts up. Here, you can pre-fetch 
 * data or require access token before the app loads.
 */
app.service<AppService>('AppService', (
    PageErrorException: PageErrorException,
    AppConfig: AppConfig,
    RequesterEngine: RequesterEngine,
    RouteService: RouteService,
    TemplateData: TemplateData
)=>{

    /** 
     * Enable this option to route users away to the login
     * page when there is no valid requester token stored
     * that is currently active
     */
    RouteService.gatekeep()

    /**
     * Do something before the app initializes. To activate the 
     * error page, simply throw an error.
     * 
     * throw new PageErrorException(500, 'some error')
     */
    const bootstrap = async (): Promise<void> => {
        
        const APP_CONFIG = new AppConfig()

        /**
         * To get the current existing user logged in to the app. 
         * @NOTE By using this method, RequesterEngine will throw 
         * an error when there is no valid requester.
         */
        // const user = await RequesterEngine.get()

        /**
         * Registers view scope in your template which can then be used
         * by using the placeholder `{{template.view}}`
         */
        TemplateData.set('view', 'default')

    }
    return {
        bootstrap: bootstrap
    }
})

